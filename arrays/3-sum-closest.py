from typing import List

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        #   The solution below tries to use a two pointer approach to find the two sum
        #   instead of the binary search
        def closest_2_sum(left, target):
            right = len(nums) - 1
            sum = 0
            current_sum = 0
            min_diff = float("inf")
            while left != right:
                sum = nums[left] + nums[right]
                if sum == target:
                    current_sum = sum
                    break
                diff = abs(sum - target)
                if diff < min_diff:
                    min_diff = diff
                    current_sum = sum
                if sum > target:
                    right -= 1
                if sum < target:
                    left += 1
            return current_sum

        nums.sort()
        current_sum = 0
        min_diff = float("inf")
        for index in range(len(nums) - 2):
            #   -2 because two sum requires at least two elements in the array
            x = target - nums[index]
            two_sum_closest_result = closest_2_sum(index + 1, x)
            diff = abs(target - (nums[index] + two_sum_closest_result))
            if diff < min_diff:
                min_diff = diff
                current_sum = two_sum_closest_result + nums[index]
        return current_sum

        #   The solution below attempts to use binary search within a sorted array
        #   to find the closest values
        #   The issue with this is finding the closest value in a binary search proves to
        #   to be very tricky with complicated edge cases. Also, it runs into TLE
        # def closest_binary_search(left, target):
        #     temp_left = left
        #     right = len(nums) - 1
        #     temp_right = right
        #     while left <= right:
        #         mid = (left + right) // 2
        #         if nums[mid] == target:
        #             return mid
        #         if nums[mid] > target:
        #             right = mid - 1
        #         else:
        #             left = mid + 1
        #     if right < temp_left:
        #         return right + 1
        #     if left > temp_right:
        #         return left - 1
        #     if left == temp_right:
        #         return left
        #     return left + 1

        # def two_sum(index, target):
        #     val = float("inf")
        #     current_ans = float("inf")
        #     for i in range(index + 1, len(nums) - 1):
        #         x = target - nums[i]
        #         ans = closest_binary_search(i + 1, x)
        #         if ans is not None:
        #             diff = abs(target - (nums[i] + nums[ans]))
        #             if diff < val:
        #                 val = diff
        #                 current_ans = nums[i] + nums[ans]
        #     if current_ans != float("inf"):
        #         return current_ans
        #     return None
        
        # nums.sort()
        # val = float("inf")
        # current_ans = float("inf")
        # for index in range(len(nums)):
        #     x = target - nums[index]
        #     ans = two_sum(index, x)
        #     if ans is not None:
        #         diff = abs(target - (nums[index] + ans))
        #         if diff < val:
        #             val = diff
        #             current_ans = nums[index] + ans
        # return int(current_ans)
        
if __name__ == "__main__":
    nums = [-1, 2, 1, -4] # [-4, -1, 1, 2]
    target = 1
    print(Solution().threeSumClosest(nums, target))

    nums = [0,0,0]
    target = 1
    print(Solution().threeSumClosest(nums, target))

    nums = [-1000, 0, 1000]
    target = 0
    print(Solution().threeSumClosest(nums, target))

    nums = [1,1,1,0]
    target = -100
    print(Solution().threeSumClosest(nums, target))

    nums = [147,465,-917,-321,551,982,-967,-672,670,-859,-776,290,-406,223,123,-266,730,339,792,588,138,822,474,-615,386,-392,559,364,124,829,-505,553,-284,-458,-826,-791,-67,-798,932,-828,-739,65,-782,-159,363,-123,893,-992,-662,-65,-352,-649,-357,780,-690,-584,-660,-427,802,113,856,34,-145,-97,-8,488,467,-24,967,96,-915,309,-931,989,-789,886,-568,451,965,-344,917,-994,865,-537,241,-761,812,768,648,594,-702,-640,845,350,-408,984,870,246,-107,508,-860,-298,514,349,960,-663,-616,-87,566,-449,161,522,293,270,-276,928,-612,117,-263,721,-692,-712,995,729,115,463,328,397,-781,-253,782,-542,71,919,286,-732,-271,401,-820,51,-232,-170,-189,154,-487,-221,632,860,38,-224,839,-227,656,194,-331,-422,-997,784,640,-367,385,202,520,-553,-44,208]
    target = 1826
    print(Solution().threeSumClosest(nums, target))

    nums = [-909,-77,561,446,697,-501,-187,-675,-847,-109,435,311,-945,-901,402,-348,145,-809,-806,-770,316,51,157,-512,748,-382,-650,-556,903,595,-119,581,-68,336,-246,189,-705,-709,-768,-836,-615,348,-487,94,-358,-961,601,-74,715,947,-289,544,-678,-917,128,-764,-680,757,390,-651,-647,97,-819,239,-827,-853,558,67,-83,541,-637,300,-525,-745,-97,-562,638,-725,565,-367,-10,902,-266,-41,-500,-941,285,57,700,755,515,604,111,-988,100,994,997,-388,-195,942,194,70,-609,-247,-449,-876,264,-665,-239,688,998,879,801,576,630,802,434,618,-654,120,522,-273,-64,-312,-679,108,-920,294,542,-758,162,-490,414,-918,-207,-748,814,-598,370,825,587,-338,-574,633,-267,725,991,-628,782,422,-979,-363,666,914,-939,-614,398,246,-508,-80,741,719,833,430,-474,-794,-116,-626,10,-270,-30,-359,385,76,-642,-632,965,539,222,717,45,232,55,-378,-701,648,147,-519,312,-533,-43,-32,-557,-962,328,559,283,310,-978,-731,363,458,-488,439,167,-233,828,-908,-582,-400,494,-773,-278,662,-141,250,-75,-360,776,-70,735,-148,-616,247,479,-96,-17,984,911,235,-305,432,-111,-543,-171,-21,-180,742,-428,-896,824,-635,-597,-335,-404,117,176,791,-204,173,778,590,-383,-992,663,-539,457,-110,611,-114,477,690,582,-136,607,-612,413,211,428,260,-282,-168,-441,554,865,-516,675,-19,960,-870,-890,-682,562,276,-124,628,894,323,-681,-215,672,371,12,-795,670,-884,509,273,-14,131,259,-977,357,392,-766,-430,652,849,139,-243,453,0,637,-63,22,-759,-930,626,-607,-741,-142,124,-332,-747,-392,583,622,-951,-324,-210,-137,-414,-133,181,933,-518,-461,-27,115,956,-572,-362,-366,-816,172,-427,-702,-767,-683,-283,-406,841,275,-703,834,-625,-639,-353,831,59,-687,-494,-188,-943,-724,-560,-160,302,358,308,-958,501,768,-842,-732,-482,-968,-509,-477,-866,-746,754,-303,603,507,-568,535,-104,634,817,5,954,835,655,-98,317,948,-622,-478,-73,466,571,523,537,681,-285,970,579,765,-785,350,229,606,-821,-339,-420,963,403,976,-310,166,251,152,764,-996,-341,-649,726,-985,-835,-696,-330,-145,-852,929,749,838,574,650,270,-377,-660,187,121,326,-925,524,-157,-369,878,-181,685,-386,-498,-106,-904,-235,-860,588,496,-563,146,104,981,927,-492,-989,-384,-818,-123,256,331,-640,-5,901,-881,868,-244,585,14,-762,188,440,797,940,-425,489,443,-129,-24,-737,683,340,621,511,709,-645,-824,126,-291]
    target = -8996
    print(Solution().threeSumClosest(nums, target))

    nums = [-198,2,-726,556,-82,100,251,-814,-86,621,295,-587,-93,82,751,-306,661,859,752,-331,-903,-318,-989,230,-830,903,309,-706,-732,664,582,-5,-94,-567,-757,79,324,-327,-508,699,109,438,-798,-38,-21,-110,265,-850,332,-172,-768,-864,320,-886,-897,255,-274,-793,185,639,486,-993,-270,26,-51,-72,-930,837,-394,578,-517,456,560,-253,-942,48,681,259,-417,932,-224,-668,551,-600,-781,785,-299,-32,-901,-718,277,-87,996,-150,-858,-251,-664,-52,447,321,-398,188,-3,-433,-415,-304,345,920,-328,306,782,170,-880,382,303,-252,-511,-867,233,182,-259,-840,-56,463,-744,-123,-132,203,-730,-173,-905,769,-407,391,655,317,-913,-451,75,-792,76,555,331,72,-836,969,-375,-919,496,987,-868,698,-18,625,-27,888,-403,885,647,-389,-45,659,671,911,43,-742,-900,-531,-91,966,-227,216,-218,360,-155,63,142,493,175,-185,990,-17,-935,-295,-735,901,-629,240,-702,-151,-70,739,-662,714,449,-937,-817,298,-196,-50,50,-48,811,-458,427,747,692,-141,-984,584,-220,-829,-803,408,488,-69,-426,882,554,200,23,470,42,413,-115,834,-353,441,423,972,995,-192,-257,-300,-634,892,-636,-783,273,641,-176,-804,-434,-770,-277,454,-963,530,-188,461,167,52,190,-714,-379,715,-763,736,66,-544,254,-429,-626,-211,-844,-214,39,257,589,-672,402,475,591,-597,768,500,450,-320,-309,-344,-456,-366,348,-302,-4,-548,225,-761,-289,205,-586,830,-153,234,-404,-365,696,-68,912,49,873,105,53,-461,289,788,-421,-291,-547,-423,245,-680,460,-704,-181,-336,896,-745,523,6,705,-22,379,428,390,-721,-985,611,-895,762,-784,157,-918,-854,-696,138,-23,789,529,361,-472,431,-240,-287,-615,351,172,315,-282,268,-187,107,71,-298,-632,950,-121,-152,-109,-590,521,520,774,612,725,-865,248,-893,-186,-391,998,-722,67,-6,141,-133,623,934,385,501,189,-777,-780,-800,-264,833,803,14,108,546,-146,-738,515]
    target = -7351
    print(Solution().threeSumClosest(nums, target))